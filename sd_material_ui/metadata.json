{
  "src/lib/components/Accordion.react.js": {
    "description": "",
    "displayName": "Accordion",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          },
          {
            "name": "isExpanded",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Elements to render inside the accordion */\n  children?: Node,\n  /** The classes to be applied to this component. The keys in this object must be valid CSS rule\n   * names, and the values must be strings for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   *   rounded\n   *   expanded\n   *   disabled\n   */\n  classes?: {\n    root?: string,\n    rounded?: string,\n    expanded?: string,\n    disabled?: string\n  },\n  /** The className of the root element */\n  className?: string,\n  /** If true, expands the accordion by defaulgt */\n  defaultExpanded?: boolean,\n  /** The classes to be applied to the details component (the element containing the accordion's\n   * children). The keys in this object must be valid CSS rule names, and the values must be strings\n   * for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   */\n  detailClasses?: {\n    root?: string,\n  },\n  /** If true, the accordion will be displayed in a disabled state */\n  disabled?: boolean,\n  /** If true, expands the accordion, otherwise collapse it. Setting this prop enables control\n   * over the accordion */\n  expanded?: boolean,\n  /** Dash callback to trigger an event handler */\n  fireEvent?: () => void,\n  /** The ID of the root element */\n  id: string,\n  /** The text displayed at the top of the accordion, regardless of expanded state*/\n  label?: string,\n  /** If true, rounded corners are disabled */\n  square?: boolean,\n  /** The classes to be applied to the summary component (the element containing the accordion's\n   * label). The keys in this object must be valid CSS rule names, and the values must be strings\n   * for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   *   expanded\n   *   focused\n   *   disabled\n   *   content\n   *   expandIcon\n   */\n  summaryClasses?: {\n    root?: string,\n    expanded?: string,\n    focused?: string,\n    disabled?: string,\n    content?: string,\n    expandIcon?: string,\n  },\n}",
              "signature": {
                "properties": [
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "classes",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n  rounded?: string,\n  expanded?: string,\n  disabled?: string\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "rounded",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "expanded",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "disabled",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "defaultExpanded",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "detailClasses",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "expanded",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "fireEvent",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "square",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "summaryClasses",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n  expanded?: string,\n  focused?: string,\n  disabled?: string,\n  content?: string,\n  expandIcon?: string,\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "expanded",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "focused",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "disabled",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "content",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "expandIcon",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Elements to render inside the accordion",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  rounded?: string,\n  expanded?: string,\n  disabled?: string\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "rounded",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "expanded",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. The keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  rounded\n  expanded\n  disabled",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The className of the root element"
      },
      "defaultExpanded": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, expands the accordion by defaulgt",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "detailClasses": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to the details component (the element containing the accordion's\nchildren). The keys in this object must be valid CSS rule names, and the values must be strings\nfor the classnames to be assigned to each rule name\nValid rule names are:\n  root"
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the accordion will be displayed in a disabled state",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "expanded": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, expands the accordion, otherwise collapse it. Setting this prop enables control\nover the accordion",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "The ID of the root element"
      },
      "label": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The text displayed at the top of the accordion, regardless of expanded state",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "square": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, rounded corners are disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "summaryClasses": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  expanded?: string,\n  focused?: string,\n  disabled?: string,\n  content?: string,\n  expandIcon?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "expanded",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "focused",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "content",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "expandIcon",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to the summary component (the element containing the accordion's\nlabel). The keys in this object must be valid CSS rule names, and the values must be strings\nfor the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  expanded\n  focused\n  disabled\n  content\n  expandIcon"
      },
      "setProps": {
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/AutoComplete.react.js": {
    "description": "Material UI AutoComplete component",
    "displayName": "AutoComplete",
    "methods": [
      {
        "name": "getDataSource",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The classes to be applied to this component. This keys in this object must be valid CSS rule\n   * names, and the values must be strings for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   *   fullWidth\n   *   focus\n   *   tag\n   *   tagSizeSmall\n   *   hasPopupIcon\n   *   hasClearIcon\n   *   inputRoot\n   *   input\n   *   inputFocused\n   *   endAdornment\n   *   clearIndicator\n   *   clearIndicatorDirty\n   *   popupIndicator\n   *   popupIndicatorOpen\n   *   popper\n   *   popperDisablePortal\n   *   paper\n   *   listbox\n   *   loading\n   *   noOptions\n   *   option\n   *   groupLabel\n   *   groupUl\n   * */\n  classes?: {\n    root?: string,\n    fullWidth?: string,\n    focus?: string,\n    tag?: string,\n    tagSizeSmall?: string,\n    hasPopupIcon?: string,\n    hasClearIcon?: string,\n    inputRoot?: string,\n    input?: string,\n    inputFocused?: string,\n    endAdornment?: string,\n    clearIndicator?: string,\n    clearIndicatorDirty?: string,\n    popupIndicator?: string,\n    popupIndicatorOpen?: string,\n    popper?: string,\n    popperDisablePortal?: string,\n    paper?: string,\n    listbox?: string,\n    loading?: string,\n    noOptions?: string,\n    option?: string,\n    groupLabel?: string,\n    groupUl?: string,\n  },\n  /** CSS class name of the root element */\n  className?: string,\n  /** Dash callback delay in ms - default is 500 ms */\n  dashCallbackDelay?: number,\n  /**\n   * Array of strings or nodes used to populate the list\n   * Alternatively, an Array of Objects with a structure like\n   * {label: 'My label to render', value: 'My value to ship on match'}\n   */\n  dataSource?: Array<any>,\n  /** String name for filter to be applied to user input.\n   * will later be mapped to function\n   */\n  filter?: 'caseInsensitiveFilter' | 'caseSensitiveFilter' | 'defaultFilter' |\n    'fuzzyFilter' | 'levenshteinDistanceFilter' | 'noFilter',\n  /** Dash-assigned callback that gets fired when the input changes. */\n  fireEvent?: () => void,\n  /** The hint content to display */\n  hintText?: Node,\n  /** Autocomplete ID */\n  id: string,\n  /** The max number of search results to be shown. By default it shows\n   * all the items which matches filter */\n  maxSearchResults?: number,\n  /** Auto complete menu is open if true */\n  open?: boolean,\n  /** If true, the list item is showed when a focus event triggers */\n  openOnFocus?: boolean,\n  /** Text being input to auto complete */\n  searchText?: string,\n  /** Dash callback to update props on the server. */\n  setProps?: () => void,\n  /** Override the inline-styles of the root element */\n  style?: Object,\n  /** If defined, the AutoComplete component hits this URL to search instead of string matching */\n  searchEndpointAPI?: string,\n  /** General JSON structure to send to the server */\n  searchJSONStructure?: Object,\n  /** The selected value of the input */\n  selectedValue?: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "classes",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n  fullWidth?: string,\n  focus?: string,\n  tag?: string,\n  tagSizeSmall?: string,\n  hasPopupIcon?: string,\n  hasClearIcon?: string,\n  inputRoot?: string,\n  input?: string,\n  inputFocused?: string,\n  endAdornment?: string,\n  clearIndicator?: string,\n  clearIndicatorDirty?: string,\n  popupIndicator?: string,\n  popupIndicatorOpen?: string,\n  popper?: string,\n  popperDisablePortal?: string,\n  paper?: string,\n  listbox?: string,\n  loading?: string,\n  noOptions?: string,\n  option?: string,\n  groupLabel?: string,\n  groupUl?: string,\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "fullWidth",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "focus",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "tag",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "tagSizeSmall",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "hasPopupIcon",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "hasClearIcon",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "inputRoot",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "input",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "inputFocused",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "endAdornment",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "clearIndicator",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "clearIndicatorDirty",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "popupIndicator",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "popupIndicatorOpen",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "popper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "popperDisablePortal",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "listbox",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "loading",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "noOptions",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "option",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "groupLabel",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "groupUl",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "dashCallbackDelay",
                    "value": {
                      "name": "number",
                      "required": false
                    }
                  },
                  {
                    "key": "dataSource",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "any"
                        }
                      ],
                      "raw": "Array<any>",
                      "required": false
                    }
                  },
                  {
                    "key": "filter",
                    "value": {
                      "name": "union",
                      "raw": "'caseInsensitiveFilter' | 'caseSensitiveFilter' | 'defaultFilter' |\n'fuzzyFilter' | 'levenshteinDistanceFilter' | 'noFilter'",
                      "elements": [
                        {
                          "name": "literal",
                          "value": "'caseInsensitiveFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'caseSensitiveFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'defaultFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'fuzzyFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'levenshteinDistanceFilter'"
                        },
                        {
                          "name": "literal",
                          "value": "'noFilter'"
                        }
                      ],
                      "required": false
                    }
                  },
                  {
                    "key": "fireEvent",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "hintText",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "maxSearchResults",
                    "value": {
                      "name": "number",
                      "required": false
                    }
                  },
                  {
                    "key": "open",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "openOnFocus",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "searchText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "searchEndpointAPI",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "searchJSONStructure",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "selectedValue",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "Array",
            "elements": [
              {
                "name": "any"
              }
            ],
            "raw": "Array<any>"
          }
        }
      },
      {
        "name": "filterFunc",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "maxResults",
            "type": {
              "name": "number"
            }
          },
          {
            "name": "inputText",
            "type": {
              "name": "string"
            }
          },
          {
            "name": "options",
            "type": {
              "name": "Array",
              "alias": "Array"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "Array"
          }
        }
      },
      {
        "name": "handleChange",
        "docblock": "calls function to fire callback and updates searchText in state\n@param searchText\n@param params",
        "modifiers": [],
        "params": [
          {
            "name": "params",
            "description": null,
            "type": {
              "name": "Object",
              "alias": "Object"
            },
            "optional": false
          },
          {
            "name": "searchText",
            "description": null,
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "calls function to fire callback and updates searchText in state"
      },
      {
        "name": "_updateTextProps",
        "docblock": "executes setProps function with searchText to update searchText in props;\nfires Dash callback event\n@param searchText\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "searchText",
            "description": null,
            "type": {
              "name": "string"
            },
            "optional": false
          }
        ],
        "returns": null,
        "description": "executes setProps function with searchText to update searchText in props;\nfires Dash callback event"
      }
    ],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  fullWidth?: string,\n  focus?: string,\n  tag?: string,\n  tagSizeSmall?: string,\n  hasPopupIcon?: string,\n  hasClearIcon?: string,\n  inputRoot?: string,\n  input?: string,\n  inputFocused?: string,\n  endAdornment?: string,\n  clearIndicator?: string,\n  clearIndicatorDirty?: string,\n  popupIndicator?: string,\n  popupIndicatorOpen?: string,\n  popper?: string,\n  popperDisablePortal?: string,\n  paper?: string,\n  listbox?: string,\n  loading?: string,\n  noOptions?: string,\n  option?: string,\n  groupLabel?: string,\n  groupUl?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fullWidth",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "focus",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tag",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tagSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "hasPopupIcon",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "hasClearIcon",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "inputRoot",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "input",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "inputFocused",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "endAdornment",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "clearIndicator",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "clearIndicatorDirty",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "popupIndicator",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "popupIndicatorOpen",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "popper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "popperDisablePortal",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "listbox",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "loading",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "noOptions",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "option",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "groupLabel",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "groupUl",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  fullWidth\n  focus\n  tag\n  tagSizeSmall\n  hasPopupIcon\n  hasClearIcon\n  inputRoot\n  input\n  inputFocused\n  endAdornment\n  clearIndicator\n  clearIndicatorDirty\n  popupIndicator\n  popupIndicatorOpen\n  popper\n  popperDisablePortal\n  paper\n  listbox\n  loading\n  noOptions\n  option\n  groupLabel\n  groupUl"
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element"
      },
      "dashCallbackDelay": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "Dash callback delay in ms - default is 500 ms",
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "dataSource": {
        "required": false,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "any"
            }
          ],
          "raw": "Array<any>"
        },
        "description": "Array of strings or nodes used to populate the list\nAlternatively, an Array of Objects with a structure like\n{label: 'My label to render', value: 'My value to ship on match'}",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "filter": {
        "required": false,
        "flowType": {
          "name": "union",
          "raw": "'caseInsensitiveFilter' | 'caseSensitiveFilter' | 'defaultFilter' |\n'fuzzyFilter' | 'levenshteinDistanceFilter' | 'noFilter'",
          "elements": [
            {
              "name": "literal",
              "value": "'caseInsensitiveFilter'"
            },
            {
              "name": "literal",
              "value": "'caseSensitiveFilter'"
            },
            {
              "name": "literal",
              "value": "'defaultFilter'"
            },
            {
              "name": "literal",
              "value": "'fuzzyFilter'"
            },
            {
              "name": "literal",
              "value": "'levenshteinDistanceFilter'"
            },
            {
              "name": "literal",
              "value": "'noFilter'"
            }
          ]
        },
        "description": "String name for filter to be applied to user input.\nwill later be mapped to function",
        "defaultValue": {
          "value": "\"defaultFilter\"",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash-assigned callback that gets fired when the input changes.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "hintText": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The hint content to display",
        "defaultValue": {
          "value": "\"Search Here\"",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Autocomplete ID"
      },
      "maxSearchResults": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The max number of search results to be shown. By default it shows\nall the items which matches filter",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "open": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Auto complete menu is open if true"
      },
      "openOnFocus": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the list item is showed when a focus event triggers",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "searchText": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Text being input to auto complete",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "searchEndpointAPI": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "If defined, the AutoComplete component hits this URL to search instead of string matching",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "searchJSONStructure": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "General JSON structure to send to the server",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "selectedValue": {
        "required": false,
        "flowType": {
          "name": "any"
        },
        "description": "The selected value of the input",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "menuCloseDelay": {
        "defaultValue": {
          "value": "300",
          "computed": false
        },
        "required": false
      },
      "searchValue": {
        "defaultValue": {
          "value": "null",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/BottomNavigation.react.js": {
    "description": "BottomNavigationItem is an item in a BottomNavigation component",
    "displayName": "BottomNavigation",
    "methods": [
      {
        "name": "buildBottomNavigationItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "navItem",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Label to use for the navigation item */\n  label: string,\n  /** Value for the navigation item */\n  value: string | number,\n  /** ID of component to jump to when this option is selected */\n  targetId?: string,\n  /** Class to apply to the icon span */\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "T_NAV_ITEM"
            }
          },
          {
            "name": "selectedValue",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The ID used to identify this component in Dash callbacks",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "displayLabels": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If True, show the labels of unselected Items",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "navItems": {
        "required": true,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Label to use for the navigation item */\n  label: string,\n  /** Value for the navigation item */\n  value: string | number,\n  /** ID of component to jump to when this option is selected */\n  targetId?: string,\n  /** Class to apply to the icon span */\n  iconClassName?: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "union",
                      "raw": "string | number",
                      "elements": [
                        {
                          "name": "string"
                        },
                        {
                          "name": "number"
                        }
                      ],
                      "required": true
                    }
                  },
                  {
                    "key": "targetId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "iconClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<T_NAV_ITEM>"
        },
        "description": "Array of navigation item props to pass to BottomNavigationItem"
      },
      "selectedValue": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "Initial selected value for the BottomNavigation"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { selectedValue: number }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ selectedValue: number }",
                  "signature": {
                    "properties": [
                      {
                        "key": "selectedValue",
                        "value": {
                          "name": "number",
                          "required": true
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Button.react.js": {
    "description": "",
    "displayName": "Button",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "This is what will be displayed inside the button.\nIf a label is specified, the text within the label prop will\nbe displayed. Otherwise, the component will expect children\nwhich will then be displayed. (In our example,\nwe are nesting an `<input type=\"file\" />` and a `span`\nthat acts as our label to be displayed.) This only\napplies to flat and disableShadow buttons.",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  label?: string,\n  text?: string,\n  textPrimary?: string,\n  textSecondary?: string,\n  outline?: string,\n  outlinedPrimary?: string,\n  outlinedSecondary?: string,\n  contained?: string,\n  containedPrimary?: string,\n  containedSecondary?: string,\n  disableElevation?: string,\n  focusVisible?: string,\n  disabled?: string,\n  colorInherit?: string,\n  textSizeSmall?: string,\n  textSizeLarge?: string,\n  outlinedSizeSmall?: string,\n  outlinedSizeLarge?: string,\n  containedSizeSmall?: string,\n  containedSizeLarge?: string,\n  sizeSmall?: string,\n  sizeLarge?: string,\n  fullWidth?: string,\n  startIcon?: string,\n  endIcon?: string,\n  iconSizeSmall?: string,\n  iconSizeMedium?: string,\n  iconSizeLarge?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "label",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "text",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outline",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "contained",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disableElevation",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "focusVisible",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorInherit",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlinedSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "containedSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fullWidth",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "startIcon",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "endIcon",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "iconSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "iconSizeMedium",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "iconSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  label\n  text\n  textPrimary\n  textSecondary\n  outline\n  outlinedPrimary\n  outlinedSecondary\n  contained\n  containedPrimary\n  containedSecondary\n  disableElevation\n  focusVisible\n  disabled\n  colorInherit\n  textSizeSmall\n  textSizeLarge\n  outlinedSizeSmall\n  outlinedSizeLarge\n  containedSizeSmall\n  containedSizeLarge\n  sizeSmall\n  sizeLarge\n  fullWidth\n  startIcon\n  endIcon\n  iconSizeSmall\n  iconSizeMedium\n  iconSizeLarge\n\n  OR\n\n  root\n  edgeStart\n  edgeEnd\n  colorInherit\n  colorPrimary\n  colorSecondary\n  disabled\n  sizeSmall\n  label\n\nSee https://material-ui.com/api/button/#css\nand https://material-ui.com/api/icon-button/#css",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableTouchRipple": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the element's ripple effect will be disabled",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Disable the button?",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the button will take up the full width of its container",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "href": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The URL to link to when the button is clicked",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "iconClass": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Sets the class of a span element inside the button",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Element ID"
      },
      "n_clicks": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "An integer that represents the number fo times that this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_clicks_previous": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "An integer that represents the previous number of times this element has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "disableShadow": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Hide the shadow behind the button"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "useIcon": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, this object is rendered as an IconButton"
      },
      "variant": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "'contained' | 'outlined' | 'text', Button type if not an IconButton",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Card.react.js": {
    "description": "Material UI Card component",
    "displayName": "Card",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Can be used to render elements inside the Card.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "contentClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the content element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "contentClasses": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to the content component. This keys in this object must be valid\nCSS rule names, and the values must be strings for the classnames to be assigned to each rule\nname",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Styles to be implemented as inline css",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "raised": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the Card component will appear raised",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Checkbox.react.js": {
    "description": "Material UI Checkbox component",
    "displayName": "Checkbox",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "checked": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Checkbox is checked if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  checked?: string,\n  disabled?: string,\n  indeterminate?: string,\n  colorPrimary?: string,\n  colorSecondary?: string,\n  sizeSmall?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "checked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "indeterminate",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  checked\n  disabled\n  indeterminate\n  colorPrimary\n  colorSecondary",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Checkbox is disabled if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disableRipple": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Ripple is disabled if true",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "A callback for firing events to dash",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "The element's ID"
      },
      "label": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The label for the checkbox",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "name": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The name prop of the checkbox",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/CircularProgress.react.js": {
    "description": "Material UI CircularProgress component",
    "displayName": "CircularProgress",
    "methods": [],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  static?: string,\n  indeterminate?: string,\n  colorPrimary?: string,\n  colorSecondary?: string,\n  circle?: string,\n  circleStatic?: string,\n  circleIndeterminate?: string,\n  circleDisableShrink?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "static",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "indeterminate",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "circle",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "circleStatic",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "circleIndeterminate",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "circleDisableShrink",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  static\n  indeterminate\n  colorPrimary\n  colorSecondary\n  circle\n  circleStatic\n  circleIndeterminate\n  circleDisableShrink",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "color": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Override the progress's color",
        "defaultValue": {
          "value": "'inherit'",
          "computed": false
        }
      },
      "mode": {
        "required": false,
        "flowType": {
          "name": "literal",
          "value": "'indeterminate'"
        },
        "description": "The mode of show your progress, for now, will always be indeterminate",
        "defaultValue": {
          "value": "'indeterminate'",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The diameter of the progress in pixels",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-style of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "thickness": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "Stroke width in pixels",
        "defaultValue": {
          "value": "3.5",
          "computed": false
        }
      },
      "innerStyle": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/CollapseTransition.react.js": {
    "description": "",
    "displayName": "CollapseTransition",
    "methods": [
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The contents of the transition element */\n  children?: Node,\n  /** CSS class name of the root element */\n  className?: string,\n  /** The pixel height of the child element when collapsed */\n  collapsedHeight: number,\n  /** Dash ID of the transition element */\n  id: string,\n  /** Dash callback to update props on the server */\n  setProps?: () => void,\n  /** If true, the transition element is displayed, else it will be hidden */\n  visible?: boolean\n}",
              "signature": {
                "properties": [
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "collapsedHeight",
                    "value": {
                      "name": "number",
                      "required": true
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "visible",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The contents of the transition element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element"
      },
      "collapsedHeight": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The pixel height of the child element when collapsed",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dash ID of the transition element"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "visible": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the transition element is displayed, else it will be hidden",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Dialog.react.js": {
    "description": "Material UI Dialog component",
    "displayName": "Dialog",
    "methods": [
      {
        "name": "changeDialogOpenStatus",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "open",
            "type": {
              "name": "boolean"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      },
      {
        "name": "openDialog",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "closeDialog",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** Dialog ID */\n  id: string,\n  /** List of space separated id's of elements to use as aria labels  */\n  ariaLabelledBy?: string,\n  /** Children to render inside of the Dialog */\n  children?: Node,\n  /** The classes to be applied to this component. This keys in this object must be valid CSS rule\n   * names, and the values must be strings for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   *   container\n   *   paper\n   *   scrollPaper\n   *   scrollBody\n   *   paperScrollPaper\n   *   paperScrollBody\n   *   paperWidthFalse\n   *   paperWidthXs\n   *   paperWidthSm\n   *   paperWidthMd\n   *   paperWidthLg\n   *   paperWidthXl\n   *   paperFullWidth\n   *   paperFullScreen\n   * */\n  classes?: {\n    root?: string,\n    container?: string,\n    paper?: string,\n    scrollPaper?: string,\n    scrollBody?: string,\n    paperScrollPaper?: string,\n    paperScrollBody?: string,\n    paperWidthFalse?: string,\n    paperWidthXs?: string,\n    paperWidthSm?: string,\n    paperWidthMd?: string,\n    paperWidthLg?: string,\n    paperWidthXl?: string,\n    paperFullWidth?: string,\n    paperFullScreen?: string\n  },\n  /** CSS class name of the root element */\n  className?: string,\n  /** Is the dialog open?\n   *\n   * IMPORTANT: When using this component in Dash, a listener must be set up (either as state or\n   * an input) for this component's props.open value in order to achieve the desired behavior.\n   * If such a listener is not in place, the non-modal version of this dialog will contaminate\n   * other callbacks in the browser\n   */\n  open?: boolean,\n  /** If set to true, the body content of the Dialog will be scrollable. */\n  autoScrollBodyContent?: boolean,\n  /** The className to add to the component container */\n  componentContainerClassName?: string,\n  /** The className to add to the content container */\n  fullWidth?: boolean,\n  /** The className to add to the Overlay component rendered behind the Dialog */\n  /** If set to true, the Close Icon will show in the upper right corner of the dialog, closing the Dialog browser side*/\n  useBrowserSideClose?: boolean,\n  /** \"paper\" or \"body\", Determines scroll container */\n  scroll?: Object,\n  /** Styles to be implemented as inline css */\n  style?: Object,\n  /** Dash callback to update props on the server */\n  setProps?: (props: { modal?: boolean, open?: boolean }) => void,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "ariaLabelledBy",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "classes",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n  container?: string,\n  paper?: string,\n  scrollPaper?: string,\n  scrollBody?: string,\n  paperScrollPaper?: string,\n  paperScrollBody?: string,\n  paperWidthFalse?: string,\n  paperWidthXs?: string,\n  paperWidthSm?: string,\n  paperWidthMd?: string,\n  paperWidthLg?: string,\n  paperWidthXl?: string,\n  paperFullWidth?: string,\n  paperFullScreen?: string\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "container",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "scrollPaper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "scrollBody",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperScrollPaper",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperScrollBody",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthFalse",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthXs",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthSm",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthMd",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthLg",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperWidthXl",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperFullWidth",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "paperFullScreen",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "open",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "autoScrollBodyContent",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "componentContainerClassName",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "fullWidth",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "useBrowserSideClose",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "scroll",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "(props: { modal?: boolean, open?: boolean }) => void",
                      "signature": {
                        "arguments": [
                          {
                            "name": "props",
                            "type": {
                              "name": "signature",
                              "type": "object",
                              "raw": "{ modal?: boolean, open?: boolean }",
                              "signature": {
                                "properties": [
                                  {
                                    "key": "modal",
                                    "value": {
                                      "name": "boolean",
                                      "required": false
                                    }
                                  },
                                  {
                                    "key": "open",
                                    "value": {
                                      "name": "boolean",
                                      "required": false
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dialog ID"
      },
      "ariaLabelledBy": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "List of space separated id's of elements to use as aria labels",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Children to render inside of the Dialog",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  container?: string,\n  paper?: string,\n  scrollPaper?: string,\n  scrollBody?: string,\n  paperScrollPaper?: string,\n  paperScrollBody?: string,\n  paperWidthFalse?: string,\n  paperWidthXs?: string,\n  paperWidthSm?: string,\n  paperWidthMd?: string,\n  paperWidthLg?: string,\n  paperWidthXl?: string,\n  paperFullWidth?: string,\n  paperFullScreen?: string\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "container",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "scrollPaper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "scrollBody",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperScrollPaper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperScrollBody",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthFalse",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthXs",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthSm",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthMd",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthLg",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperWidthXl",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperFullWidth",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperFullScreen",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  container\n  paper\n  scrollPaper\n  scrollBody\n  paperScrollPaper\n  paperScrollBody\n  paperWidthFalse\n  paperWidthXs\n  paperWidthSm\n  paperWidthMd\n  paperWidthLg\n  paperWidthXl\n  paperFullWidth\n  paperFullScreen",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "open": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Is the dialog open?\n\nIMPORTANT: When using this component in Dash, a listener must be set up (either as state or\nan input) for this component's props.open value in order to achieve the desired behavior.\nIf such a listener is not in place, the non-modal version of this dialog will contaminate\nother callbacks in the browser",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "autoScrollBodyContent": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If set to true, the body content of the Dialog will be scrollable.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "componentContainerClassName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The className to add to the component container"
      },
      "fullWidth": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "The className to add to the content container",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "useBrowserSideClose": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If set to true, the Close Icon will show in the upper right corner of the dialog, closing the Dialog browser side",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "scroll": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "\"paper\" or \"body\", Determines scroll container",
        "defaultValue": {
          "value": "'body'",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Styles to be implemented as inline css",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "actions": {
        "defaultValue": {
          "value": "null",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/Divider.react.js": {
    "description": "Material UI Divider component",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  absolute?: string,\n  vertical?: string,\n  light?: string,\n  middle?: string,\n  inset?: string,\n  flexItem?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "absolute",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "vertical",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "light",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "middle",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "inset",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "flexItem",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  absolute\n  vertical\n  light\n  middle\n  inset\n  flexItem",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Drawer.react.js": {
    "description": "",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "anchor": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Controls where the drawer appears. Must be one of \"top\", \"bottom\", \"left\", or \"right\"\nDefaults to \"left\"",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dialog ID"
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Children to render inside of the Dialog",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  docked?: string,\n  paper?: string,\n  paperAnchorLeft?: string,\n  paperAnchorRight?: string,\n  paperAnchorTop?: string,\n  paperAnchorBottom?: string,\n  paperAnchorDockedLeft?: string,\n  paperAnchorDockedTop?: string,\n  paperAnchorDockedRight?: string,\n  paperAnchorDockedBottom?: string,\n  modal?: string\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "docked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paper",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorLeft",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorRight",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorTop",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorBottom",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedLeft",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedTop",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedRight",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paperAnchorDockedBottom",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "modal",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  docked\n  paper\n  paperAnchorLeft\n  paperAnchorRight\n  paperAnchorTop\n  paperAnchorBottom\n  paperAnchorDockedLeft\n  paperAnchorDockedTop\n  paperAnchorDockedRight\n  paperAnchorDockedBottom\n  modal",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "open": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Is the drawer open?\n\nIMPORTANT: When using this component in Dash, a listener must be set up (either as state or\nan input) for this component's props.open value in order to achieve the desired behavior.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Type of drawer to be used, default is persistent",
        "defaultValue": {
          "value": "\"persistent\"",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "classNameRoot": {
        "defaultValue": {
          "value": "''",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/DropDownMenu.react.js": {
    "description": "",
    "displayName": "DropDownMenu",
    "methods": [
      {
        "name": "buildMenuItem",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "menuItem",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** If true, the width of the popover will automatically be set according to the items inside\n   * the menu, otherwise it will be at least the width of the select input. */\n  autoWidth?: boolean,\n  /** The classes to be applied to this component. This keys in this object must be valid CSS rule\n   * names, and the values must be strings for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   *   select\n   *   filled\n   *   outlined\n   *   selectMenu\n   *   disabled\n   */\n  classes?: {\n    root?: string,\n    select?: string,\n    filled?: string,\n    outlined?: string,\n    selectMenu?: string,\n    disabled?: string\n  },\n  /** If true, this dropdown will not be interactive */\n  disabled?: boolean,\n  /** Text to display under the menu */\n  helperText?: string,\n  /** The ID used for this dropdown menu */\n  id: string,\n  /** The text that will be displayed when no items are selected, and which will move to above the\n   * menu when there is at least one selection */\n  labelText?: string,\n  /** The ID associated with the label */\n  labelId?: string,\n  /** Allows multiple selections from the dropdown if true, else only one selection */\n  multiple?: boolean,\n  /** An array of objects, with each object representing an option in the menu. Each object must\n   * must contain either a value and primaryText keys or, if useGrouping is set to true, then an\n   * object may contain a grouping key. The order of the array is important when grouping, as each\n   * item will be associated with the grouping most recently seen while iterating through the array\n   * Example:\n   *  [\n   *    {\"grouping\": \"group A\"},\n   *    {\"primaryText\": \"option 1\", \"value\": 1},\n   *    {\"primaryText\": \"option 2\", \"value\": 2},\n   *    {\"grouping\": \"group B\"},\n   *    {\"primaryText\": \"option 3\", \"value\": 3},\n   *  ]\n   *  This will group options 1 and 2 with group A, and option 3 with group B.\n   */\n  options?: Array<Object>,\n  /** Dash callback to update props on the server */\n  setProps?: () => void,\n  /** If true, the expanded dropdown menu will include labels for the various groups of options.\n   * Those labels and groupings are set in the options prop*/\n  useGrouping?: boolean,\n  /** The active selection for the menu */\n  value?: any,\n  /** Allows selection of one of three variant types of menus: filled, outlined, or standard. Set\n   * to standard by default */\n  variant?: string\n}",
              "signature": {
                "properties": [
                  {
                    "key": "autoWidth",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "classes",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n  select?: string,\n  filled?: string,\n  outlined?: string,\n  selectMenu?: string,\n  disabled?: string\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "select",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "filled",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "outlined",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "selectMenu",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "disabled",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "helperText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "labelText",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelId",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "multiple",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "options",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "Object"
                        }
                      ],
                      "raw": "Array<Object>",
                      "required": false
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "useGrouping",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  },
                  {
                    "key": "variant",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "autoWidth": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the width of the popover will automatically be set according to the items inside\nthe menu, otherwise it will be at least the width of the select input.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  select?: string,\n  filled?: string,\n  outlined?: string,\n  selectMenu?: string,\n  disabled?: string\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "select",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "filled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlined",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "selectMenu",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  select\n  filled\n  outlined\n  selectMenu\n  disabled",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, this dropdown will not be interactive",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "helperText": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Text to display under the menu",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "The ID used for this dropdown menu"
      },
      "labelText": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The text that will be displayed when no items are selected, and which will move to above the\nmenu when there is at least one selection",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelId": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The ID associated with the label",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "multiple": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Allows multiple selections from the dropdown if true, else only one selection",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "options": {
        "required": false,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "Object"
            }
          ],
          "raw": "Array<Object>"
        },
        "description": "An array of objects, with each object representing an option in the menu. Each object must\nmust contain either a value and primaryText keys or, if useGrouping is set to true, then an\nobject may contain a grouping key. The order of the array is important when grouping, as each\nitem will be associated with the grouping most recently seen while iterating through the array\nExample:\n [\n   {\"grouping\": \"group A\"},\n   {\"primaryText\": \"option 1\", \"value\": 1},\n   {\"primaryText\": \"option 2\", \"value\": 2},\n   {\"grouping\": \"group B\"},\n   {\"primaryText\": \"option 3\", \"value\": 3},\n ]\n This will group options 1 and 2 with group A, and option 3 with group B.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "useGrouping": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the expanded dropdown menu will include labels for the various groups of options.\nThose labels and groupings are set in the options prop",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "value": {
        "required": false,
        "flowType": {
          "name": "any"
        },
        "description": "The active selection for the menu",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Allows selection of one of three variant types of menus: filled, outlined, or standard. Set\nto standard by default",
        "defaultValue": {
          "value": "\"standard\"",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/FadeTransition.react.js": {
    "description": "",
    "displayName": "FadeTransition",
    "methods": [
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The contents of the transition element */\n  children?: Node,\n  /** CSS class name of the root element */\n  className?: string,\n  /** Dash ID of the transition element */\n  id: string,\n  /** Dash callback to update props on the server */\n  setProps?: () => void,\n  /** The styles passed to the transition element\n   * An style object (even if empty) must be given to the transition element or it will fail\n   * silently. See: https://github.com/mui-org/material-ui/issues/15472\n   */\n  style?: Object,\n  /** If true, the transition element is displayed, else it will be hidden */\n  visible?: boolean\n}",
              "signature": {
                "properties": [
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "visible",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The contents of the transition element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element"
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dash ID of the transition element"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The styles passed to the transition element\nAn style object (even if empty) must be given to the transition element or it will fail\nsilently. See: https://github.com/mui-org/material-ui/issues/15472",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "visible": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the transition element is displayed, else it will be hidden",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/FontIcon.react.js": {
    "description": "Material UI FontIcon component",
    "displayName": "FontIcon",
    "methods": [],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  colorPrimary?: string,\n  colorSecondary?: string,\n  colorAction?: string,\n  colorError?: string,\n  colorDisabled?: string,\n  fontSizeSmall?: string,\n  fontSizeLarge?: string,\n  fontSizeInherit?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorAction",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorError",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorDisabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fontSizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fontSizeLarge",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fontSizeInherit",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  colorPrimary\n  colorSecondary\n  colorAction\n  colorError\n  colorDisabled\n  fontSizeSmall\n  fontSizeLarge\n  fontSizeInherit",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "id for the component",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "iconName": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "defines specific icon when using public icon font",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "override inline-styles of root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/GrowTransition.react.js": {
    "description": "",
    "displayName": "GrowTransition",
    "methods": [
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The contents of the transition element */\n  children?: Node,\n  /** CSS class name of the root element */\n  className?: string,\n  /** Dash ID of the transition element */\n  id: string,\n  /** Dash callback to update props on the server */\n  setProps?: () => void,\n  /** The styles passed to the transition element\n   * An style object (even if empty) must be given to the transition element or it will fail\n   * silently. See: https://github.com/mui-org/material-ui/issues/15472\n   */\n  style?: Object,\n  /** If true, the transition element is displayed, else it will be hidden */\n  visible?: boolean\n}",
              "signature": {
                "properties": [
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "visible",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The contents of the transition element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element"
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dash ID of the transition element"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The styles passed to the transition element\nAn style object (even if empty) must be given to the transition element or it will fail\nsilently. See: https://github.com/mui-org/material-ui/issues/15472",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "visible": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the transition element is displayed, else it will be hidden",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Pagination.react.js": {
    "description": "Material UI Pagination component",
    "displayName": "Pagination",
    "methods": [],
    "props": {
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Component ID"
      },
      "page": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "Page number",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "count": {
        "required": true,
        "flowType": {
          "name": "number"
        },
        "description": "Number of pages"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { stepIndex?: number }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ stepIndex?: number }",
                  "signature": {
                    "properties": [
                      {
                        "key": "stepIndex",
                        "value": {
                          "name": "number",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {\n}",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash event handler for click events"
      }
    }
  },
  "src/lib/components/Paper.react.js": {
    "description": "A Dash material-ui Paper component",
    "displayName": "Paper",
    "methods": [],
    "props": {
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "ID for Paper",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Can be used to render elements inside the Paper",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  rounded?: string,\n  outlined?: string,\n  elevation0?: string,\n  elevation1?: string,\n  elevation2?: string,\n  elevation3?: string,\n  elevation4?: string,\n  elevation5?: string,\n  elevation6?: string,\n  elevation7?: string,\n  elevation8?: string,\n  elevation9?: string,\n  elevation10?: string,\n  elevation11?: string,\n  elevation12?: string,\n  elevation13?: string,\n  elevation14?: string,\n  elevation15?: string,\n  elevation16?: string,\n  elevation17?: string,\n  elevation18?: string,\n  elevation19?: string,\n  elevation20?: string,\n  elevation21?: string,\n  elevation22?: string,\n  elevation23?: string,\n  elevation24?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "rounded",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "outlined",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation0",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation1",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation2",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation3",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation4",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation5",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation6",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation7",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation8",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation9",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation10",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation11",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation12",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation13",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation14",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation15",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation16",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation17",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation18",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation19",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation20",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation21",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation22",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation23",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "elevation24",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  rounded\n  outlined\n  elevation0\n  elevation1\n  ...\n  elevation23\n  elevation24",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "rounded": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "By default, the paper container will have a border radius.\nSet this to false to generate a container with sharp corners.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "zDepth": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "This number represents the zDepth of the paper shadow",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Picker.react.js": {
    "description": "",
    "displayName": "Picker",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "format": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Format to be used in displaying date. Some possibilities:\nyyyy-MM-dd\nMM/dd/yyyy\nMM-dd",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Picker ID"
      },
      "label": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Label for the date or time picker",
        "defaultValue": {
          "value": "\"\"",
          "computed": false
        }
      },
      "type": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Type of date or time picker, \"time\", \"date\", or \"date-dialog\"",
        "defaultValue": {
          "value": "\"date\"",
          "computed": false
        }
      },
      "value": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Representation of datetime, like 2020-12-25T13:11:00.000Z",
        "defaultValue": {
          "value": "\"01-01-2020\"",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Popover.react.js": {
    "description": "Material UI Popover component",
    "displayName": "Popover",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleRequestClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "anchorOrigin": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  vertical?: 'top' | 'center' | 'bottom',\n  horizontal?: 'left' | 'middle' | 'right',\n}",
          "signature": {
            "properties": [
              {
                "key": "vertical",
                "value": {
                  "name": "union",
                  "raw": "'top' | 'center' | 'bottom'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'top'"
                    },
                    {
                      "name": "literal",
                      "value": "'center'"
                    },
                    {
                      "name": "literal",
                      "value": "'bottom'"
                    }
                  ],
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "union",
                  "raw": "'left' | 'middle' | 'right'",
                  "elements": [
                    {
                      "name": "literal",
                      "value": "'left'"
                    },
                    {
                      "name": "literal",
                      "value": "'middle'"
                    },
                    {
                      "name": "literal",
                      "value": "'right'"
                    }
                  ],
                  "required": false
                }
              }
            ]
          }
        },
        "description": "This is the point on the anchor where the popover's targetOrigin will attach to.\nOptions: vertical: [top, center, bottom] horizontal: [left, middle, right].",
        "defaultValue": {
          "value": "{vertical: 'bottom', horizontal: 'left'}",
          "computed": false
        }
      },
      "animated": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the popover will apply transitions when it is added to the DOM."
      },
      "autoCloseWhenOffScreen": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the popover will hide when the anchor is scrolled off the screen"
      },
      "buttonLabel": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "For Dash use - user can assign label to button",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "buttonType": {
        "required": false,
        "flowType": {
          "name": "union",
          "raw": "'flat' | 'raised' | 'icon'",
          "elements": [
            {
              "name": "literal",
              "value": "'flat'"
            },
            {
              "name": "literal",
              "value": "'raised'"
            },
            {
              "name": "literal",
              "value": "'icon'"
            }
          ]
        },
        "description": "For Dash use - user can anchor the popover to flat, icon, or raised button",
        "defaultValue": {
          "value": "'raised'",
          "computed": false
        }
      },
      "buttonIcon": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "For Dash use - specify what icon to use when using an icon button",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "buttonStyle": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "For Dash use - specify the styles for the button",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  paper?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "paper",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  paper"
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The content of the popover",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disableScrollLock": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Disable the scroll lock behavior"
      },
      "open": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the popover is visible.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "zDepth": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The zDepth of the popover.",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/RadioButtonGroup.react.js": {
    "description": "",
    "displayName": "RadioButtonGroup",
    "methods": [
      {
        "name": "buildRadioButton",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "buttonItem",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n    /** If true, the radio button is disabled */\n  disabled?: boolean,\n  /** Label to appear next to button */\n  label?: string,\n  /** Specify the location of the label relative to the radio button\n   * Must be one of: \"top\", \"start\", \"bottom\", or \"end\". Defaults to \"end\" */\n  labelPlacement?: string,\n  /** value of the the radio button */\n  value?: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelPlacement",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "SD_RADIO_BUTTON"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "Object",
              "alias": "Object"
            }
          }
        ],
        "returns": null
      },
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The classes to be applied to each radio button. This keys in this object must be valid CSS\n   * rule names, and the values must be strings for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   *   checked\n   *   disabled\n   *   colorPrimary\n   *   colorSecondary\n   */\n  classes?: {\n    root?: string,\n    checked?: string,\n    disabled?: string,\n    colorPrimary?: string,\n    colorSecondary?: string\n  },\n  /** the css class name of the root element */\n  className?: string,\n  /** a callback for firng events to dash */\n  fireEvent?: () => void,\n  /** the element's ID */\n  id: string,\n  /** the name that will be applied to the group of radio buttons */\n  name: string,\n  /**\n   * used to create the RadioButtons to populate the RadioButtonGroup with. A Dash user passes in a\n   * list of dict items, each one having at least a `value` and `label`. If that value is selected,\n   * valueSelected will be updated\n   */\n  options?: Array<SD_RADIO_BUTTON>,\n  /** If true, Radio Buttons appear as a row\" */\n  row?: boolean,\n  /** dash callback to update props on the server */\n  setProps?: () => void,\n  /** Initial value selected */\n  valueSelected: string,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "classes",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n  checked?: string,\n  disabled?: string,\n  colorPrimary?: string,\n  colorSecondary?: string\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "checked",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "disabled",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "colorPrimary",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "colorSecondary",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "fireEvent",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "name",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "options",
                    "value": {
                      "name": "Array",
                      "elements": [
                        {
                          "name": "signature",
                          "type": "object",
                          "raw": "{\n    /** If true, the radio button is disabled */\n  disabled?: boolean,\n  /** Label to appear next to button */\n  label?: string,\n  /** Specify the location of the label relative to the radio button\n   * Must be one of: \"top\", \"start\", \"bottom\", or \"end\". Defaults to \"end\" */\n  labelPlacement?: string,\n  /** value of the the radio button */\n  value?: any,\n}",
                          "signature": {
                            "properties": [
                              {
                                "key": "disabled",
                                "value": {
                                  "name": "boolean",
                                  "required": false
                                }
                              },
                              {
                                "key": "label",
                                "value": {
                                  "name": "string",
                                  "required": false
                                }
                              },
                              {
                                "key": "labelPlacement",
                                "value": {
                                  "name": "string",
                                  "required": false
                                }
                              },
                              {
                                "key": "value",
                                "value": {
                                  "name": "any",
                                  "required": false
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "raw": "Array<SD_RADIO_BUTTON>",
                      "required": false
                    }
                  },
                  {
                    "key": "row",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "valueSelected",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  checked?: string,\n  disabled?: string,\n  colorPrimary?: string,\n  colorSecondary?: string\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "checked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to each radio button. This keys in this object must be valid CSS\nrule names, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  checked\n  disabled\n  colorPrimary\n  colorSecondary",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "the css class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "a callback for firng events to dash",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "the element's ID"
      },
      "name": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "the name that will be applied to the group of radio buttons"
      },
      "options": {
        "required": false,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n    /** If true, the radio button is disabled */\n  disabled?: boolean,\n  /** Label to appear next to button */\n  label?: string,\n  /** Specify the location of the label relative to the radio button\n   * Must be one of: \"top\", \"start\", \"bottom\", or \"end\". Defaults to \"end\" */\n  labelPlacement?: string,\n  /** value of the the radio button */\n  value?: any,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelPlacement",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": false
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<SD_RADIO_BUTTON>"
        },
        "description": "used to create the RadioButtons to populate the RadioButtonGroup with. A Dash user passes in a\nlist of dict items, each one having at least a `value` and `label`. If that value is selected,\nvalueSelected will be updated",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "row": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, Radio Buttons appear as a row\"",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "valueSelected": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Initial value selected"
      }
    }
  },
  "src/lib/components/SlideTransition.react.js": {
    "description": "",
    "displayName": "SlideTransition",
    "methods": [
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The contents of the transition element */\n  children?: Node,\n  /** CSS class name of the root element */\n  className?: string,\n  /** Dash ID of the transition element */\n  id: string,\n  /** Dash callback to update props on the server */\n  setProps?: () => void,\n  /** The direction the child component will move when sliding into view */\n  slideDirection?: \"up\" | \"down\" | \"left\" | \"right\",\n  /** The styles passed to the transition element\n   * An style object (even if empty) must be given to the transition element or it will fail\n   * silently. See: https://github.com/mui-org/material-ui/issues/15472\n   */\n  style?: Object,\n  /** If true, the transition element is displayed, else it will be hidden */\n  visible?: boolean\n}",
              "signature": {
                "properties": [
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "slideDirection",
                    "value": {
                      "name": "union",
                      "raw": "\"up\" | \"down\" | \"left\" | \"right\"",
                      "elements": [
                        {
                          "name": "literal",
                          "value": "\"up\""
                        },
                        {
                          "name": "literal",
                          "value": "\"down\""
                        },
                        {
                          "name": "literal",
                          "value": "\"left\""
                        },
                        {
                          "name": "literal",
                          "value": "\"right\""
                        }
                      ],
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "visible",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The contents of the transition element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element"
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dash ID of the transition element"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "slideDirection": {
        "required": false,
        "flowType": {
          "name": "union",
          "raw": "\"up\" | \"down\" | \"left\" | \"right\"",
          "elements": [
            {
              "name": "literal",
              "value": "\"up\""
            },
            {
              "name": "literal",
              "value": "\"down\""
            },
            {
              "name": "literal",
              "value": "\"left\""
            },
            {
              "name": "literal",
              "value": "\"right\""
            }
          ]
        },
        "description": "The direction the child component will move when sliding into view",
        "defaultValue": {
          "value": "\"up\"",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The styles passed to the transition element\nAn style object (even if empty) must be given to the transition element or it will fail\nsilently. See: https://github.com/mui-org/material-ui/issues/15472",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "visible": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the transition element is displayed, else it will be hidden",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Snackbar.react.js": {
    "description": "Material UI Snackbar component",
    "displayName": "Snackbar",
    "methods": [
      {
        "name": "handleClose",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleActionClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "action": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The text of the action button inside the snackbar. If empty, no action button will be added\nNote that this does not work with children.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "actionStyles": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Styles to be applied to the action button"
      },
      "autoHideDuration": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The number of milliseconds to wait before automatically dismissing. If no value is specified\nthe snackbar will dismiss normally. If a value is provided the snackbar can still be dismissed\nnormally. If a snackbar is dismissed before the timer expires, the timer will be cleared.",
        "defaultValue": {
          "value": "3000",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  anchorOriginTopCenter?: string,\n  anchorOriginBottomCenter?: string,\n  anchorOriginTopRight?: string,\n  anchorOriginBottomRight?: string,\n  anchorOriginTopLeft?: string,\n  anchorOriginBottomLeft?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "anchorOriginTopCenter",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "anchorOriginBottomCenter",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "anchorOriginTopRight",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "anchorOriginBottomRight",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "anchorOriginTopLeft",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "anchorOriginBottomLeft",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  anchorOriginTopCenter\n  anchorOriginBottomCenter\n  anchorOriginTopRight\n  anchorOriginBottomRight\n  anchorOriginTopLeft\n  anchorOriginBottomLeft"
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Elements to render inside the snackbar. Note that this will override message and actions",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash event handler for click events",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "The element's ID"
      },
      "message": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The message to be displayed.\n(Note: If the message is an element or array, and the Snackbar may re-render while it is\nstill open, ensure that the same object remains as the message property if you want to avoid\nthe Snackbar hiding and showing again). Note that this does not work with children.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "n_clicks": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "An integer that represents the number of times that action button has been clicked",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "open": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Controls whether the Snackbar is opened or not",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: {open?: boolean}) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{open?: boolean}",
                  "signature": {
                    "properties": [
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "bodyStyle": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "required": false
      },
      "contentStyle": {
        "defaultValue": {
          "value": "{}",
          "computed": false
        },
        "required": false
      }
    }
  },
  "src/lib/components/Stepper.react.js": {
    "description": "Material UI Stepper component",
    "displayName": "Stepper",
    "methods": [
      {
        "name": "handleNext",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handlePrev",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "resetSteps",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "createSteps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "stepCount",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "activeStep": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "Set the active step (zero based index). This will enable Step control helpers",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "alternativeLabel": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the labels will appear under the steps",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "backButtonStyle": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The style for the back button",
        "defaultValue": {
          "value": "{marginRight: 12}",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  horizontal?: string,\n  vertical?: string,\n  alternativeLabel?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "horizontal",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "vertical",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "alternativeLabel",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  horizontal\n  vertical\n  alternativeLabel"
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "finishedButtonStyle": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The style for the button displayed after all steps have been finished",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "finishedText": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The text to display on the final button when all steps have been completed",
        "defaultValue": {
          "value": "'Click here to view again'",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash event handler for click events",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dash ID"
      },
      "linear": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If set to true, the Stepper will assist in controlling steps for linear flow",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "nextButtonStyle": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The style for the next button",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "orientation": {
        "required": false,
        "flowType": {
          "name": "union",
          "raw": "'horizontal' | 'vertical'",
          "elements": [
            {
              "name": "literal",
              "value": "'horizontal'"
            },
            {
              "name": "literal",
              "value": "'vertical'"
            }
          ]
        },
        "description": "The stepper orientation (layout flow direction)",
        "defaultValue": {
          "value": "'horizontal'",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: {stepIndex?: number}) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{stepIndex?: number}",
                  "signature": {
                    "properties": [
                      {
                        "key": "stepIndex",
                        "value": {
                          "name": "number",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "stepCount": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The number of steps that this component will contain",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "stepLabels": {
        "required": false,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "string"
            }
          ],
          "raw": "Array<string>"
        },
        "description": "The text labels that will be shown next to each step number. The length of this array must\nmatch the total number of steps",
        "defaultValue": {
          "value": "['Step 1', 'Step 2', 'Step 3']",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-style of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Subheader.react.js": {
    "description": "Material UI Subheader component",
    "displayName": "Subheader",
    "methods": [],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Node that will be placed inside the Subheader",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  colorPrimary?: string,\n  colorInherit?: string,\n  gutters?: string,\n  inset?: string,\n  sticky?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorInherit",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "gutters",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "inset",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sticky",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  colorPrimary\n  colorInherit\n  gutters\n  inset\n  sticky",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "inset": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the Subheader will be indented",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Tabs.react.js": {
    "description": "Material UI Tabs component",
    "displayName": "Tabs",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": {
              "name": "Object",
              "alias": "Object"
            }
          },
          {
            "name": "index",
            "type": {
              "name": "number"
            }
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Element ID",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  textColorPrimary?: string,\n  textColorSecondary?: string,\n  textColorInherit?: string,\n  selected?: string,\n  disabled?: string,\n  fullWidth?: string,\n  wrapped?: string,\n  wrapper?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textColorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textColorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "textColorInherit",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "selected",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fullWidth",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "wrapped",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "wrapper",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  textColorPrimary\n  textColorSecondary\n  textColorInherit\n  selected\n  disabled\n  fullWidth\n  wrapped\n  wrapper",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Pass Tab components as children",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash-assigned callback that gets fired when the input changes.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "(props: { modal?: boolean, open?: boolean }) => void",
          "signature": {
            "arguments": [
              {
                "name": "props",
                "type": {
                  "name": "signature",
                  "type": "object",
                  "raw": "{ modal?: boolean, open?: boolean }",
                  "signature": {
                    "properties": [
                      {
                        "key": "modal",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      },
                      {
                        "key": "open",
                        "value": {
                          "name": "boolean",
                          "required": false
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tabPropsArray": {
        "required": false,
        "flowType": {
          "name": "Array",
          "elements": [
            {
              "name": "signature",
              "type": "object",
              "raw": "{\n  classes?: Object,\n  disabled: boolean,\n  disableFocusRipple: boolean,\n  disableRipple: boolean,\n  iconClass: string,\n  label: string,\n  value: any,\n  wrapped: boolean,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "classes",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  },
                  {
                    "key": "disableFocusRipple",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  },
                  {
                    "key": "disableRipple",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  },
                  {
                    "key": "iconClass",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "value",
                    "value": {
                      "name": "any",
                      "required": true
                    }
                  },
                  {
                    "key": "wrapped",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  }
                ]
              }
            }
          ],
          "raw": "Array<{\n  classes?: Object,\n  disabled: boolean,\n  disableFocusRipple: boolean,\n  disableRipple: boolean,\n  iconClass: string,\n  label: string,\n  value: any,\n  wrapped: boolean,\n}>"
        },
        "description": "Array of tab properties. Available props:\nclasses\ndisabled\ndisableRipple\ndisableFocusRipple\nicon\nlabel\nvalue\nwrapped"
      },
      "value": {
        "required": false,
        "flowType": {
          "name": "any"
        },
        "description": "Makes Tabs controllable and selects the tab whose value prop matches this prop",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Textfield.react.js": {
    "description": "Material UI TextField component",
    "displayName": "TextField",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_updateTextProps",
        "docblock": "executes setProps function with value to update value in props;\nfires Dash callback event\n@param value\n@private",
        "modifiers": [],
        "params": [
          {
            "name": "value",
            "description": null,
            "type": null,
            "optional": false
          }
        ],
        "returns": null,
        "description": "executes setProps function with value to update value in props;\nfires Dash callback event"
      }
    ],
    "props": {
      "autoFocus": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the input element will be focused during the first mount",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  formControl?: string,\n  focused?: string,\n  disabled?: string,\n  colorSecondary?: string,\n  underline?: string,\n  error?: string,\n  multiline?: string,\n  fullWidth?: string,\n  input?: string,\n  inputMultiline?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "formControl",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "focused",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "underline",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "error",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "multiline",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "fullWidth",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "input",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "inputMultiline",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n    root\n    formControl\n    focused\n    disabled\n    colorSecondary\n    underline\n    error\n    multiline\n    fullWidth\n    input\n    inputMultiline",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "color": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "'primary' | 'secondary'",
        "defaultValue": {
          "value": "'primary'",
          "computed": false
        }
      },
      "dashCallbackDelay": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "Dash callback delay in ms - default is 500 ms",
        "defaultValue": {
          "value": "500",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the input element will be disabled.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "error": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the label will be displayed in an error state",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fireEvent": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to trigger an event handler",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "fullWidth": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the input will take up the full width of its container",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "helperText": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The helper text content",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Element ID"
      },
      "multiline": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, a textarea element will be rendered instead of an input",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "required": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the label is displayed as required and the input element` will be required",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server.",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "size": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "'medium' | 'small'",
        "defaultValue": {
          "value": "'medium'",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "Override the inline-styles of the root element",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "type": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "Type of the input element. It should be a valid HTML5 input type",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "value": {
        "required": false,
        "flowType": {
          "name": "any"
        },
        "description": "The value of the input element, required for a controlled component",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "variant": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "'filled' | 'outlined' | 'standard'",
        "defaultValue": {
          "value": "'standard'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/Toggle.react.js": {
    "description": "",
    "displayName": "Toggle",
    "methods": [
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "event",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The classes to be applied to this component. This keys in this object must be valid CSS rule\n   * names, and the values must be strings for the classnames to be assigned to each rule name\n   * Valid rule names are:\n   *   root\n   *   edgeStart\n   *   edgeEnd\n   *   switchBase\n   *   colorPrimary\n   *   colorSecondary\n   *   sizeSmall\n   *   checked\n   *   disabled\n   *   input\n   *   thumb\n   *   tract\n   */\n  classes?: {\n    root?: string,\n    edgeStart?: string,\n    edgeEnd?: string,\n    switchBase?: string,\n    colorPrimary?: string,\n    colorSecondary?: string,\n    sizeSmall?: string,\n    checked?: string,\n    disabled?: string,\n    input?: string,\n    thumb?: string,\n    tract?: string\n  },\n  /** CSS class name of the root element */\n  className?: string,\n  /** Whether the toggle is disabled (true) or not (false) */\n  disabled?: boolean,\n  /** Toggle ID */\n  id: string,\n  /** The label for the toggle */\n  label?: string,\n  /** If using a single label, its position can be: \"top\", \"start\", \"bottom\", or \"end\" */\n  labelPlacement?: string,\n  /** The space between the label(s) and toggle */\n  labelSpacing?: int,\n  /**\n   * A second label for the toggle. If this is used, the labelPlacement value is ignored, and the\n   * secondaryLabel will be positioned to the right of the toggle, and the first label to the left\n   */\n  secondaryLabel?: string,\n  /** Dash callback to update props on the server */\n  setProps?: () => void,\n  /** Whether toggle is on (true) or off (false) */\n  toggled: boolean,\n}",
              "signature": {
                "properties": [
                  {
                    "key": "classes",
                    "value": {
                      "name": "signature",
                      "type": "object",
                      "raw": "{\n  root?: string,\n  edgeStart?: string,\n  edgeEnd?: string,\n  switchBase?: string,\n  colorPrimary?: string,\n  colorSecondary?: string,\n  sizeSmall?: string,\n  checked?: string,\n  disabled?: string,\n  input?: string,\n  thumb?: string,\n  tract?: string\n}",
                      "signature": {
                        "properties": [
                          {
                            "key": "root",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "edgeStart",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "edgeEnd",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "switchBase",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "colorPrimary",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "colorSecondary",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "sizeSmall",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "checked",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "disabled",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "input",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "thumb",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          },
                          {
                            "key": "tract",
                            "value": {
                              "name": "string",
                              "required": false
                            }
                          }
                        ]
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "disabled",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "label",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelPlacement",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "labelSpacing",
                    "value": {
                      "name": "int",
                      "required": false
                    }
                  },
                  {
                    "key": "secondaryLabel",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "toggled",
                    "value": {
                      "name": "boolean",
                      "required": true
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  root?: string,\n  edgeStart?: string,\n  edgeEnd?: string,\n  switchBase?: string,\n  colorPrimary?: string,\n  colorSecondary?: string,\n  sizeSmall?: string,\n  checked?: string,\n  disabled?: string,\n  input?: string,\n  thumb?: string,\n  tract?: string\n}",
          "signature": {
            "properties": [
              {
                "key": "root",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "edgeStart",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "edgeEnd",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "switchBase",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorPrimary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "colorSecondary",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "sizeSmall",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "checked",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "disabled",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "input",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "thumb",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tract",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  root\n  edgeStart\n  edgeEnd\n  switchBase\n  colorPrimary\n  colorSecondary\n  sizeSmall\n  checked\n  disabled\n  input\n  thumb\n  tract",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "disabled": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "Whether the toggle is disabled (true) or not (false)",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Toggle ID"
      },
      "label": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "The label for the toggle",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "labelPlacement": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "If using a single label, its position can be: \"top\", \"start\", \"bottom\", or \"end\"",
        "defaultValue": {
          "value": "\"end\"",
          "computed": false
        }
      },
      "labelSpacing": {
        "required": false,
        "flowType": {
          "name": "int"
        },
        "description": "The space between the label(s) and toggle",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "secondaryLabel": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "A second label for the toggle. If this is used, the labelPlacement value is ignored, and the\nsecondaryLabel will be positioned to the right of the toggle, and the first label to the left",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "toggled": {
        "required": true,
        "flowType": {
          "name": "boolean"
        },
        "description": "Whether toggle is on (true) or off (false)"
      }
    }
  },
  "src/lib/components/Tooltip.react.js": {
    "description": "Material UI Tooltip component",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "arrow": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, adds an arrow to the tooltip",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "Tooltip reference element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "classes": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "object",
          "raw": "{\n  tooltip?: string,\n  tooltipArrow?: string,\n  arrow?: string,\n  tooltipPlacementLeft?: string,\n  tooltipPlacementRight?: string,\n  tooltipPlacementTop?: string,\n  tooltipPlacementBottom?: string,\n}",
          "signature": {
            "properties": [
              {
                "key": "tooltip",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tooltipArrow",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "arrow",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tooltipPlacementLeft",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tooltipPlacementRight",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tooltipPlacementTop",
                "value": {
                  "name": "string",
                  "required": false
                }
              },
              {
                "key": "tooltipPlacementBottom",
                "value": {
                  "name": "string",
                  "required": false
                }
              }
            ]
          }
        },
        "description": "The classes to be applied to this component. This keys in this object must be valid CSS rule\nnames, and the values must be strings for the classnames to be assigned to each rule name\nValid rule names are:\n  tooltip\n  tooltipArrow\n  arrow\n  tooltipPlacementLeft\n  tooltipPlacementRight\n  tooltipPlacementTop\n  tooltipPlacementBottom",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "enterDelay": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The number of milliseconds to wait before showing the tooltip",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "leaveDelay": {
        "required": false,
        "flowType": {
          "name": "number"
        },
        "description": "The number of milliseconds to wait before hiding the tooltip",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "placement": {
        "required": false,
        "flowType": {
          "name": "union",
          "raw": "'bottom-end' | 'bottom-start' | 'bottom' | 'left-end' | 'left-start'\n| 'left' | 'right-end' | 'right-start' | 'right' | 'top-end' | 'top-start' | 'top'",
          "elements": [
            {
              "name": "literal",
              "value": "'bottom-end'"
            },
            {
              "name": "literal",
              "value": "'bottom-start'"
            },
            {
              "name": "literal",
              "value": "'bottom'"
            },
            {
              "name": "literal",
              "value": "'left-end'"
            },
            {
              "name": "literal",
              "value": "'left-start'"
            },
            {
              "name": "literal",
              "value": "'left'"
            },
            {
              "name": "literal",
              "value": "'right-end'"
            },
            {
              "name": "literal",
              "value": "'right-start'"
            },
            {
              "name": "literal",
              "value": "'right'"
            },
            {
              "name": "literal",
              "value": "'top-end'"
            },
            {
              "name": "literal",
              "value": "'top-start'"
            },
            {
              "name": "literal",
              "value": "'top'"
            }
          ]
        },
        "description": "Tooltip placement",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "title": {
        "required": true,
        "flowType": {
          "name": "Node"
        },
        "description": "Tooltip title. Zero-length titles string are never displayed"
      }
    }
  },
  "src/lib/components/ZoomTransition.react.js": {
    "description": "",
    "displayName": "ZoomTransition",
    "methods": [
      {
        "name": "UNSAFE_componentWillReceiveProps",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nextProps",
            "type": {
              "name": "signature",
              "type": "object",
              "raw": "{\n  /** The contents of the transition element */\n  children?: Node,\n  /** CSS class name of the root element */\n  className?: string,\n  /** Dash ID of the transition element */\n  id: string,\n  /** Dash callback to update props on the server */\n  setProps?: () => void,\n  /** The styles passed to the transition element\n   * An style object (even if empty) must be given to the transition element or it will fail\n   * silently. See: https://github.com/mui-org/material-ui/issues/15472\n   */\n  style?: Object,\n  /** If true, the transition element is displayed, else it will be hidden */\n  visible?: boolean\n}",
              "signature": {
                "properties": [
                  {
                    "key": "children",
                    "value": {
                      "name": "Node",
                      "required": false
                    }
                  },
                  {
                    "key": "className",
                    "value": {
                      "name": "string",
                      "required": false
                    }
                  },
                  {
                    "key": "id",
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  },
                  {
                    "key": "setProps",
                    "value": {
                      "name": "signature",
                      "type": "function",
                      "raw": "() => void",
                      "signature": {
                        "arguments": [],
                        "return": {
                          "name": "void"
                        }
                      },
                      "required": false
                    }
                  },
                  {
                    "key": "style",
                    "value": {
                      "name": "Object",
                      "required": false
                    }
                  },
                  {
                    "key": "visible",
                    "value": {
                      "name": "boolean",
                      "required": false
                    }
                  }
                ]
              },
              "alias": "Props"
            }
          },
          {
            "name": "nextContent",
            "type": {
              "name": "unknown"
            }
          }
        ],
        "returns": {
          "type": {
            "name": "void"
          }
        }
      }
    ],
    "props": {
      "children": {
        "required": false,
        "flowType": {
          "name": "Node"
        },
        "description": "The contents of the transition element",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "className": {
        "required": false,
        "flowType": {
          "name": "string"
        },
        "description": "CSS class name of the root element"
      },
      "id": {
        "required": true,
        "flowType": {
          "name": "string"
        },
        "description": "Dash ID of the transition element"
      },
      "setProps": {
        "required": false,
        "flowType": {
          "name": "signature",
          "type": "function",
          "raw": "() => void",
          "signature": {
            "arguments": [],
            "return": {
              "name": "void"
            }
          }
        },
        "description": "Dash callback to update props on the server",
        "defaultValue": {
          "value": "() => {}",
          "computed": false
        }
      },
      "style": {
        "required": false,
        "flowType": {
          "name": "Object"
        },
        "description": "The styles passed to the transition element\nAn style object (even if empty) must be given to the transition element or it will fail\nsilently. See: https://github.com/mui-org/material-ui/issues/15472",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "visible": {
        "required": false,
        "flowType": {
          "name": "boolean"
        },
        "description": "If true, the transition element is displayed, else it will be hidden",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  }
}